# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ls7aXwgu91gHbCoTBrwHcAVn-mkv-d8q
"""

from sklearn.metrics import f1_score, precision_score, recall_score
from keras.models import Sequential
from keras.layers import Activation
from keras.layers import Dense, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import Callback
import keras
from keras.datasets import cifar10
import numpy as np

(X_train, y_train), (X_test, y_test) = cifar10.load_data()

class Metrics(Callback):
    def on_train_begin(self, logs={}):
        self.val_f1s = []
        self.val_recalls = []
        self.val_precisions = []

def on_epoch_end(self, epoch, logs={}):
        val_predict = (np.asarray(self.model.predict(self.validation_data[0]))).round()
        val_targ = self.validation_data[1]
        _val_f1 = f1_score(val_targ, val_predict, average=None)
        _val_recall = recall_score(val_targ, val_predict, average=None)
        _val_precision = precision_score(val_targ, val_predict, average=None)
        self.val_f1s.append(_val_f1)
        self.val_recalls.append(_val_recall)
        self.val_precisions.append(_val_precision)
        print(" — val_f1: % f — val_precision: % f — val_recall % f" % (_val_f1[np.nonzero(_val_f1)][0],_val_precision[np.nonzero(_val_precision)][0] ,_val_recall[np.nonzero(_val_recall)][0] ))
        return

metrics = Metrics()

model = Sequential()
model.add(Conv2D(32, (3, 3)))
model.add(Activation('tanh'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy,
 optimizer=keras.optimizers.Adam(),
)

model.fit(X_train, y_train, epochs=20, batch_size=1024, verbose=1, validation_data=(X_test, y_test), callbacks=[metrics])
model.save('bushtranser.model')