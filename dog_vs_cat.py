# -*- coding: utf-8 -*-
"""dog_Vs_cat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUlbl0IMq-gSS02KX90FmOc-mpzDSnwN
"""

from google.colab import drive
drive.mount('/content/gdrive')

import cv2 
import os 
import numpy as np 
from random import shuffle 
from tqdm import tqdm 
import matplotlib.pyplot as plt

TEST_DIR_CAT = '/content/gdrive/My Drive/Colab-Notebooks/phase-4/test_set/cats'
TEST_DIR_DOG = '/content/gdrive/My Drive/Colab-Notebooks/phase-4/test_set/dogs'
TRAIN_DIR_CAT = '/content/gdrive/My Drive/Colab-Notebooks/phase-4/training_set/cats'
TRAIN_DIR_DOG = '/content/gdrive/My Drive/Colab-Notebooks/phase-4/training_set/dogs'
IMG_SIZE = 64

X_testing_data = []
y_testing_data = []
# X_training_data = []
# y_training_data = []

"""# saving cat test data"""

for img in tqdm(os.listdir(TEST_DIR_CAT)): 
  path = os.path.join(TEST_DIR_CAT, img) 
  img_num = img.split('.')[0] 
  img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
  img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
  X_testing_data.append(np.array(img/256))
  
  
y_testing_data = np.zeros(len(X_testing_data))


for img in tqdm(os.listdir(TEST_DIR_DOG)): 
  path = os.path.join(TEST_DIR_DOG, img)
  img_num = img.split('.')[0] 
  img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
#   print(img.shape)
  img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
  X_testing_data.append(np.array(img/256))
  
  
size = len(X_testing_data) -len(y_testing_data)
temp = np.ones(size)
xx = np.append(y_testing_data , temp)
y_testing_data = xx

print(np.array(X_testing_data).shape)
print(np.array(y_testing_data).shape)

X_testing_data = np.array(X_testing_data)
y_testing_data = np.array(y_testing_data)

X_training_data = []
y_training_data = []

# y_testing_data.shape

for img in tqdm(os.listdir(TRAIN_DIR_CAT)): 
  path = os.path.join(TRAIN_DIR_CAT, img) 
  img_num = img.split('.')[0] 
  img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
  img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
  X_training_data.append(np.array(img/256))
  
  
y_training_data = np.zeros(len(X_training_data))

for img in tqdm(os.listdir(TRAIN_DIR_DOG)): 
  path = os.path.join(TRAIN_DIR_DOG, img)
  img_num = img.split('.')[0] 
  img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
#   print(img.shape)
  img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
  X_training_data.append(np.array(img/256))
  
  
size = len(X_training_data) -len(y_training_data)
temp = np.ones(size)
xx = np.append(y_training_data , temp)
y_training_data = xx

"""# Saving Dog test data"""

X_train = np.array(X_training_data).reshape(-1, 64, 64, 1)
X_test = np.array(X_testing_data).reshape(-1, 64, 64, 1)
y_train = np.array(y_training_data)
y_test = np.array(y_testing_data)

# X_testing_data = np.asarray(X_testing_data).reshape(-1, 64, 64, 1)
import keras
# import keras_metrics
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D, Activation
from keras.layers.normalization import BatchNormalization
from keras.layers.advanced_activations import LeakyReLU

model = Sequential() 
model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 1))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size=(2, 2)))  
# model.add(Conv2D(64, (3,3))) 
# model.add(Activation('relu')) 
# model.add(MaxPooling2D(pool_size=(2, 2)))  
# model.add(Conv2D(64, (3, 3))) 
# model.add(Activation('relu')) 
# model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Conv2D(64, (3, 3))) 
model.add(Activation('relu')) 
model.add(MaxPooling2D(pool_size=(2, 2)))  
model.add(Flatten())
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss=keras.losses.binary_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy'])
model.summary()

epochs = 10
history = model.fit(X_train, y_train, epochs=epochs, verbose=1, validation_data=(X_test, y_test))

from sklearn.metrics import f1_score

s = model.predict_classes(X_train)
fscore = f1_score(y_train,s)
print(fscore)

s = model.predict_classes(X_test)
fscore = f1_score(y_test,s)
print(fscore)

# model.save('initial.model')

# testing_data = np.asarray(testing_data).reshape(-1, 64, 64, 1)
# X = np.asarray(testing_data).reshape(-1, 64, 64, 1)
# test_dt = np.asarray(testing_data)